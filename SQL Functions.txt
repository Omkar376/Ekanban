using MySql.Data.MySqlClient;
using System;
using System.Data;
using System.Windows.Forms;

namespace proEkanban
{
    static class MySQLFunctions
    {
        static String[] ItemNumber = { "A5E39131198001", "A5E39131198002", "A5E39131198003", "A5E39131198004", "A5E39131198005", "A5E39131198006", "A5E39131198007", "A5E39131198008", "A5E39131198009", "A5E39131198010", "A5E39131198011", "A5E39131198012", "A5E39131390001", "A5E39131390002", "A5E39131390003", "A5E39257286001", "A5E39257286002", "A5E39257286003", "A5E39257286004", "A5E39257286005", "A5E39257286006" };
        static String[] Subassembly = { "P01", "P02", "P03", "P04", "P05", "P06", "P07", "P08", "P09", "P10", "P11", "P12", "A01", "A02", "A03", "C01", "C02", "C03", "C04", "C05","C06" };
        static private MySqlConnection connection = new MySqlConnection("SERVER=den1.mysql4.gear.host;PORT=3306;Database=kanban;UID=kanban;PWD=Aa8VZ_jdK5?9;");
        static public void Refresh(DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter("Select * FROM monthlyplan", connection);
                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void RefreshPriority(DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter("Select Description,Priority FROM subassemblyplan", connection);
                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void RefreshOrders(DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter("Select * FROM orders", connection);
                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void Refresh2(DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter("Select * FROM subassemblyplan", connection);
                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void Refresh3(DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter("Select * FROM kanbanid", connection);
                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void RefreshKanbanIDEmpty(String Subassembly, DataGridView dataGridView)
        {
            String sqlstring = "";
           
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                if (Subassembly != "All")
                {
                    sqlstring = "Select * FROM kanbanid where Subassembly = @Subassembly"; ;
                }
                else if (Subassembly == "All")
                {
                    sqlstring = "Select* FROM kanbanid";
                }
                MySqlCommand commandInsert = new MySqlCommand(sqlstring, connection);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter(commandInsert);

                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void RefreshOrderDispatched(DataGridView dataGridView)
        {
            String Status = "Order Dispatched";
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select * FROM orders" + " where Status=@Status", connection);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter(commandInsert);

                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void RefreshKanbanIDEmpty2(String Subassembly, DataGridView dataGridView)
        {
            String sqlstring = "";
            String Status = "Empty";
            String Status2 = "Not Assigned";
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                if (Subassembly != "All")
                {
                    sqlstring = "Select Subassembly,KanbanID,Status FROM kanbanid where Subassembly = @Subassembly and (Status=@Status or Status=@Status2)"; ;
                }
                else if (Subassembly == "All")
                {
                    sqlstring = "Select* FROM kanbanid";
                }
                MySqlCommand commandInsert = new MySqlCommand(sqlstring, connection);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                commandInsert.Parameters.AddWithValue("@Status2", Status2);
                MySqlDataAdapter dataAdapter = new MySqlDataAdapter(commandInsert);

                DataTable datatable = new DataTable();
                dataAdapter.Fill(datatable);
                dataGridView.DataSource = datatable;

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void InsertOrder(int Priority, string ItemNumber, string Description, int Quantity, string date, string Status, string KanbanID, DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO Orders(Priority,ItemNumber,Description,Quantity,date,Status,KanbanID) Values(@Priority,@ItemNumber,@Description,@Quantity,@date,@Status,@KanbanID)", connection);
                commandInsert.Parameters.AddWithValue("@Priority", Priority);
                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                commandInsert.Parameters.AddWithValue("@Description", Description);
                commandInsert.Parameters.AddWithValue("@Quantity", Quantity);
                commandInsert.Parameters.AddWithValue("@date", date);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void InsertPlan(int SrNo, string ItemNumber, string Description, string Type, string Week, string Subassembly, string SubAssItemNumber, int PlannedQty, DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO monthlyplan(SrNo,ItemNumber,Description,Type,Week,Subassembly,SubAssItemNumber,PlannedQty) Values(@SrNo,@ItemNumber,@Description,@Type,@Week,@Subassembly,@SubAssItemNumber,@PlannedQty)", connection);
                commandInsert.Parameters.AddWithValue("@SrNo", SrNo);
                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                commandInsert.Parameters.AddWithValue("@Description", Description);
                commandInsert.Parameters.AddWithValue("@Type", Type);
                commandInsert.Parameters.AddWithValue("@Week", Week);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@SubAssItemNumber", SubAssItemNumber);
                commandInsert.Parameters.AddWithValue("@PlannedQty", PlannedQty);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void InsertPlan2(string ItemNumber, int PlannedQty, DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update monthlyplan Set PlannedQty=@PlannedQty" + " where ItemNumber=@ItemNumber", connection);


                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);

                commandInsert.Parameters.AddWithValue("@PlannedQty", PlannedQty);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void InsertSubAssPlan(int SrNo, string ItemNumber, string Description, int Plan, int DeliveredQty, int RemainingQty, int CurrentStock, int SafetyStock, int ReorderQty, int KanbanQty, DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO subassemblyplan(SrNo,ItemNumber,Description,Plan,DeliveredQty,RemainingQty,CurrentStock,SafetyStock,ReorderQty,KanbanQty) Values(@SrNo,@ItemNumber,@Description,@Plan,@DeliveredQty,@RemainingQty,@CurrentStock,@SafetyStock,@ReorderQty,@KanbanQty)", connection);
                commandInsert.Parameters.AddWithValue("@SrNo", SrNo);
                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                commandInsert.Parameters.AddWithValue("@Description", Description);
                commandInsert.Parameters.AddWithValue("@Plan", Plan);
                commandInsert.Parameters.AddWithValue("@DeliveredQty", DeliveredQty);
                commandInsert.Parameters.AddWithValue("@RemainingQty", RemainingQty);
                commandInsert.Parameters.AddWithValue("@CurrentStock", CurrentStock);
                commandInsert.Parameters.AddWithValue("@SafetyStock", SafetyStock);
                commandInsert.Parameters.AddWithValue("@ReorderQty", ReorderQty);
                commandInsert.Parameters.AddWithValue("@KanbanQty", KanbanQty);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void Kanbanid(int SrNo, string SubAssItemNumber, string Subassembly, string KanbanID, string Status, DataGridView dataGridView)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO kanbanid(SrNo,Subassembly,SubAssItemNumber,KanbanID,Status) Values(@SrNo,@Subassembly,@SubAssItemNumber,@KanbanID,@Status)", connection);
                commandInsert.Parameters.AddWithValue("@SrNo", SrNo);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@SubAssItemNumber", SubAssItemNumber);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void NewOrderCreate(string Description, int Quantity)
        {
            int Priority = 1;  String Status = "In Progress";
            String ItemNumber1 = " ";
            int index = Array.IndexOf(Subassembly, Description);
            ItemNumber1 = ItemNumber[index];
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO Orders(Priority,ItemNumber,Description,Quantity,Status) Values(@Priority,@ItemNumber,@Description,@Quantity,@Status)", connection);
                commandInsert.Parameters.AddWithValue("@Priority", Priority);
                commandInsert.Parameters.AddWithValue("@Description", Description);
                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber1);
                commandInsert.Parameters.AddWithValue("@Quantity", Quantity);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                MessageBox.Show("New Order Created");
                OtherFunctions.EMail("New Order Created", "A new order is created for Subassembly:" + Description + " with Quantity" + Quantity, "omkar.gulave123@gmail.com");


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }


        }

        static public void SubAssemblyPlanUpdate(string ItemNumber, int Plan)
        {
            String str = ItemNumber;
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set Plan=Plan+@Plan" + " where ItemNumber=@str", connection);
                commandInsert.Parameters.AddWithValue("@Plan", Plan);
                commandInsert.Parameters.AddWithValue("@str", str);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void SubAssemblyPriorityUpdate(string Description, int Priority)
        {
            
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set Priority=@Priority" + " where Description=@Description", connection);
                commandInsert.Parameters.AddWithValue("@Description", Description);
                commandInsert.Parameters.AddWithValue("@Priority", Priority);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void ChangeStatusEmpty(string KanbanID)
        {
            String Empty = "Empty";
            String Description = KanbanID.Remove(0, 2);
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update kanbanid Set Status=@Empty" + " where kanbanID=@KanbanID", connection);
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                commandInsert.Parameters.AddWithValue("@Empty", Empty);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                MySqlCommand commandInsert2 = new MySqlCommand("Update subassemblyplan Set CurrentStock=CurrentStock-48" + " where Description=@Description", connection);
                commandInsert2.Parameters.AddWithValue("@Description", Description);
                commandInsert2.ExecuteNonQuery();
                commandInsert2.Parameters.Clear();
                CheckStock(KanbanID);

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void ChangeStatusToInStock(string KanbanID)
        {
            String InStock = "In Stock";
          
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update kanbanid Set Status=@InStock" + " where KanbanID=@KanbanID", connection);
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                commandInsert.Parameters.AddWithValue("@InStock", InStock);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void CheckStock(string KanbanID)
        {
            int CurrentStock = 0, TransitStock = 0, OrderedStock = 0, SafetyStock = 0;
            String Description = KanbanID.Remove(0, 2); String ItemNumber = " "; int Priority = 1, Quantity = 0;
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand cmd = new MySqlCommand("select * from subassemblyplan where Description=@Description", connection);
                cmd.Parameters.AddWithValue("@Description", Description);
                var dr = cmd.ExecuteReader();
                
                if (dr.Read())
                {
                    CurrentStock = Convert.ToInt32(dr["CurrentStock"]);
                    SafetyStock = Convert.ToInt32(dr["SafetyStock"]);
                    ItemNumber = (dr["ItemNumber"].ToString());
                    Priority = Convert.ToInt32(dr["Priority"]);
                    Quantity = Convert.ToInt32(dr["ReorderQty"]);
                    connection.Close();
                }
                if ((CurrentStock + TransitStock + OrderedStock) < SafetyStock)
                {

                    String Status = "In Progress";
                    try
                    {
                        if (connection.State == ConnectionState.Closed)
                            connection.Open();
                        MySqlCommand commandInsert = new MySqlCommand("Insert INTO Orders(Priority,ItemNumber,Description,Quantity,KanbanID,Status) Values(@Priority,@ItemNumber,@Description,@Quantity,@KanbanID,@Status)", connection);
                        commandInsert.Parameters.AddWithValue("@Priority", Priority);
                        commandInsert.Parameters.AddWithValue("@Description", Description);
                        commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                        commandInsert.Parameters.AddWithValue("@Quantity", Quantity);
                        commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                        commandInsert.Parameters.AddWithValue("@Status", Status);

                        commandInsert.ExecuteNonQuery();
                        commandInsert.Parameters.Clear();
                        OtherFunctions.EMail("New Order Created", "A new order is created for Subassembly: " + Description + " with Quantity: " + Quantity, "omkar.gulave123@gmail.com");


                    }
                    catch (MySqlException exception)
                    {
                        MessageBox.Show(exception.ToString());
                    }
                    finally

                    {
                        connection.Close();
                    }
                }

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void OrderStatusToInTransit(int OrderID)
        {
            String InTransit = "Order Dispatched";
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update orders Set Status=@InTransit" + " where OrderID=@OrderID", connection);
                commandInsert.Parameters.AddWithValue("@OrderID", OrderID);
                commandInsert.Parameters.AddWithValue("@InTransit", InTransit);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
               
                

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void AcknowledgeOrder(int OrderID)
        {
            String ItemNumber = "";
            String KanbanID="";
            String Status = "Order Completed";
            int Quantity=0;
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand cmd = new MySqlCommand("select * from orders where OrderID=@OrderID", connection);
                cmd.Parameters.AddWithValue("@OrderID", OrderID);
                var dr = cmd.ExecuteReader();

                if (dr.Read())
                {
                    ItemNumber = (dr["ItemNumber"].ToString());
                    KanbanID = (dr["KanbanID"].ToString());
                    Quantity = Convert.ToInt32(dr["Quantity"]);
                    connection.Close();
                }
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set CurrentStock=CurrentStock+@Quantity,DeliveredQty=DeliveredQty+@Quantity" + " where ItemNumber=@ItemNumber", connection);
                    commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                    commandInsert.Parameters.AddWithValue("@Quantity", Quantity);
                    commandInsert.ExecuteNonQuery();
                    commandInsert.Parameters.Clear();
                    OtherFunctions.KanbanIDArrayToList(KanbanID);
                    
                    OtherFunctions.EMail("Order Acknowledgement", "The order with OrderID: " + OrderID + " with Quantity " + Quantity+" is confirmed", "omkar.gulave123@gmail.com");
               
                }
                catch (MySqlException exception)
                {
                    MessageBox.Show(exception.ToString());
                }
                finally

                {
                    connection.Close();
                }
                try
                {
                    if (connection.State == ConnectionState.Closed)
                        connection.Open();
                    MySqlCommand commandInsert = new MySqlCommand("Update orders Set Status=@Status" + " where OrderID=@OrderID", connection);
                    commandInsert.Parameters.AddWithValue("@OrderID", OrderID);
                    commandInsert.Parameters.AddWithValue("@Status", Status);
                    commandInsert.ExecuteNonQuery();
                    commandInsert.Parameters.Clear();
                    MessageBox.Show("Order Acknowledged");

                }
                catch (MySqlException exception)
                {
                    MessageBox.Show(exception.ToString());
                }
                finally

                {
                    connection.Close();
                }
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public string Check1(String table, String columnName,String parameterString,int parameterInteger )
        {

            String string1="";
            try
            {
                if (connection.State == ConnectionState.Closed)
                connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select @table where @columnName=@parameter1 and @columnName2=@parameter2", connection);
                commandInsert.Parameters.AddWithValue("@table", table);
                commandInsert.Parameters.AddWithValue("@columnName", columnName);
                commandInsert.Parameters.AddWithValue("@parameter1", parameterString);
                commandInsert.Parameters.AddWithValue("@parameter2", parameterInteger);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
            return string1;
        }
        static public void Check2(String table, String columnName, String parameterString, int parameterInteger)
        {

            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select @table where @columnName=@parameter1 and @columnName2=@parameter2", connection);
                commandInsert.Parameters.AddWithValue("@table", table);
                commandInsert.Parameters.AddWithValue("@columnName", columnName);
                commandInsert.Parameters.AddWithValue("@parameter1", parameterString);
                commandInsert.Parameters.AddWithValue("@parameter2", parameterInteger);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                connection.Close();
            }
        }
        static public int GetKanbanCount(String Description)
        {
            int qty = 0;
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand cmd = new MySqlCommand("select * from subassemblyplan where Description=@Description", connection);
                cmd.Parameters.AddWithValue("@Description", Description);
                var dr = cmd.ExecuteReader();

                if (dr.Read())
                {
                    qty = Convert.ToInt32(dr["KanbanQty"]);
                    connection.Close();
                }
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
            return qty;
        }
        static public void InsertKanban(string Subassembly, string KanbanID, string Status)
        {
            String ItemNumber = OtherFunctions.getItemNumber(Subassembly);
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Insert INTO kanbanid(Subassembly,ItemNumber,KanbanID,Status) Values(@Subassembly,@ItemNumber,@KanbanID,@Status)", connection);

                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@ItemNumber", ItemNumber);
                commandInsert.Parameters.AddWithValue("@Status", Status);
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
        }
        static public void KanbanQtyUpdate(String Subassembly, int KanbanQty)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set KanbanQty=@KanbanQty" + " where Description=@Subassembly", connection);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@KanbanQty", KanbanQty);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                connection.Close();
            }
        }
        static public void StockUpdate(String Subassembly, int Quantity)
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set CurrentStock=CurrentStock+@Quantity, DeliveredQty=DeliveredQty+@Quantity" + " where Description=@Subassembly", connection);
                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@Quantity", Quantity);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                connection.Close();
            }
        }

        static public void ClearMonthlyPlan()
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update monthlyplan Set PlannedQty=0", connection);
                
               
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                connection.Close();
            }
        }
        static public void ClearSubassemblyPlan()
        {
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set Plan=0", connection);
               

                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                connection.Close();
            }
        }
        static public string CheckKanbanIDStatus(string KanbanID)
        {
            String string1 = "";
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select * from kanbanid where KanbanID=@KanbanID", connection);
              
                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);
               
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
            return string1;
        }
        static public string CheckOrderStatus(String OrderID)
        {
            String string1 = "";
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select * from orders where OrderID=@OrderID", connection);

                commandInsert.Parameters.AddWithValue("@OrderID", OrderID);
               
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
            return string1;
        }
        static public void DeleteOrder(String OrderID)
        {
            
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Delete from orders where OrderID=@OrderID", connection);

                commandInsert.Parameters.AddWithValue("@OrderID", OrderID);

                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
          
        }
        static public void DeleteKanbanID(String KanbanID)
        {

            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Delete from kanbanid where KanbanID=@KanbanID", connection);

                commandInsert.Parameters.AddWithValue("@KanbanID", KanbanID);

                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }

        }
        static public int GetQuantity(String Subassembly,String QuantityType)
        {
          int quantity= 0;
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Select * from subassemblyplan where Description=@Subassembly", connection);

                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
               
              
                var dr = commandInsert.ExecuteReader();

                if (dr.Read())
                {
                    if(QuantityType=="Plan")
                    quantity = Convert.ToInt32(dr["Plan"]);
                    if (QuantityType == "CurrentStock") quantity = Convert.ToInt32(dr["CurrentStock"]);
                    if (QuantityType == "DeliveredQty") quantity = Convert.ToInt32(dr["DeliveredQty"]);
                    if (QuantityType == "SafetyStock") quantity = Convert.ToInt32(dr["SafetyStock"]);
                    if (QuantityType == "ReorderQty") quantity = Convert.ToInt32(dr["ReorderQty"]);
                    connection.Close();
                }
                

            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
            return quantity;
        }
        static public void UpdateQuantity(String Subassembly, String QuantityType,int quantity)
        {
           
            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update subassemblyplan Set @QuantityType=@quantity where Description=@Subassembly", connection);

                commandInsert.Parameters.AddWithValue("@Subassembly", Subassembly);
                commandInsert.Parameters.AddWithValue("@QuantityType", QuantityType);
                commandInsert.Parameters.AddWithValue("@quantity", quantity);
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();
                


            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
           
        }
        static public void EditOrders(String OrderID, String Type, String edit)
        {

            try
            {
                if (connection.State == ConnectionState.Closed)
                    connection.Open();
                MySqlCommand commandInsert = new MySqlCommand("Update orders Set @Type=@edit where OrderID=@OrderID", connection);

                commandInsert.Parameters.AddWithValue("@OrderID", OrderID);
                commandInsert.Parameters.AddWithValue("@Type", Type);

                if (Type == "Quantity")
                { commandInsert.Parameters.AddWithValue("@edit", Convert.ToInt32(edit)); }
                else
                {
                    commandInsert.Parameters.AddWithValue("@edit",edit);
                }
                commandInsert.ExecuteNonQuery();
                commandInsert.Parameters.Clear();



            }
            catch (MySqlException exception)
            {
                MessageBox.Show(exception.ToString());
            }
            finally

            {
                connection.Close();
            }
           
        }
    }
   
}
    

